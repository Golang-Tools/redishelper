package redishelper

import (
	"context"
	"strconv"
	"time"

	"github.com/go-redis/redis"
)

// Lock 分布式锁结构
type Lock struct {
	Key      string
	ClientID uint16
	MaxTTL   time.Duration
	client   redis.UniversalClient
}

func New(client redis.UniversalClient, key string, maxttl time.Duration) *Lock {
	lock := new(Lock)
	lock.Key = key
	lock.MaxTTL = maxttl
	lock.client = client
	return lock
}

//ConsumerName 消费者名
func (l *Lock) ClientName() string {
	return strconv.FormatUint(uint64(l.ClientID), 32)
}

//Lock 设置锁
//return ok bool 是否已可用
func (l *Lock) Lock(ctx context.Context) (bool, error) {
	set, err := l.client.SetNX(ctx, l.Key, l.ClientName(), l.MaxTTL).Result()
	if err != nil {
		return false, err
	}
	if set == false {
		return false, nil
	}
	return true, nil
}

//Unlock 释放锁,锁不存在也不会报错
func (l *Lock) Unlock(ctx context.Context) error {

	_, err = conn.Del(lock.key).Result()
	if err != nil {
		return err
	}
	return nil
}
